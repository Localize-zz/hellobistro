const {
  Customer,
  CustomerRating,
  MenuItem,
  Order,
  OrderItem,
  Restaurant,
  RestaurantUser,
  MenuSection,
} = require('../database/index.js');

const data = {};

const getUsers = async () => {
  data.users = await Customer.findAll({}).map(user => user.get({ plain: true }));
  console.log(data.users.length, ' users loaded.');
};

const getRestaurants = async () => {
  data.restaurants = await Restaurant.findAll({ include: [{ model: MenuItem }] }).map(biz => biz.get({ plain: true }));
  // filter out restaurants that don't have menu items.
  data.restaurants = data.restaurants.filter(biz => (biz.MenuItems ? biz.MenuItems.length > 0 : 1 + 1 === 3));
  console.log(data.restaurants, ' restaurants loaded.');
};

const getRandomUserId = () => {
  const min = 1;
  const max = data.users.length + 2;
  const i = Math.floor(Math.random() * (max - min)) + min;
  return data.users[i].id;
};

const getRandomRestaurantId = () => {
  const min = 0;
  const max = data.restaurants.length;
  const i = Math.floor(Math.random() * (max - min)) + min;
  return data.restaurants[i].id;
};

const getRandomQuantity = () => {
  const min = 1;
  const max = 5;
  return Math.floor(Math.random() * (max - min)) + min;
};

const generateOrder = (restaurant, customer, itemQuantity) => {
  const RestaurantId = restaurant || getRandomRestaurantId();
  const CustomerId = customer || getRandomUserId();
  const quantity = itemQuantity || getRandomQuantity();
  const menu = data.restaurants.find(biz => biz.id === RestaurantId).MenuItems;
  const order = [];
  const min = 0;
  const max = menu.length - 1;
  // randomly select 'i' quantity of food items at index of 'j'
  for (let i = 1; i <= quantity; i += 1) {
    const j = Math.floor(Math.random() * (max - min)) + min;
    if (order.indexOf(menu[j]) === -1) {
      const orderItem = menu[j];
      orderItem.quantity = 1;
      orderItem.special = 'Generated by simulator';
      order.push(orderItem);
    } else {
      const k = order.indexOf(menu[j]);
      order[k].quantity += 1;
    }
  }
  // calculate total bill based on items in order.
  const total = order.reduce((a, b) =>
    a + (b.price * b.quantity), 0);
  console.log('Generated Order... customerId: ', CustomerId, ' resturantId: ', RestaurantId, ' items: ', order, ' Total price: ', total);

  // post order to database.
  Order.create({
    status: 'queued',
    total,
    transactionId: 111,
    table: 'Generated by simulator',
    CustomerId,
    RestaurantId: 5,
    createdAt: '2018-05-03 21:57:09',
  }).then((result) => {
    order.forEach((item) => {
      result.addMenuItem(item.id, { through: { special: item.special, price: item.price } });
    });
  });
};


const startSimulation = async () => {
  await getUsers();
  await getRestaurants();
  await generateOrder();
  await generateOrder();
  await generateOrder();
};

startSimulation();
